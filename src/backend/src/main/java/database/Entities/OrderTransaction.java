package database.Entities;

import com.fasterxml.jackson.annotation.*;
import jakarta.persistence.*;
import jakarta.validation.constraints.FutureOrPresent;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.ws.rs.client.Client;
import lombok.*;
import org.hibernate.annotations.ColumnDefault;
import utility.ResponseEntityErrorCodes;

import java.sql.Date;
import java.util.List;

import static utility.ConstantMessages.NOT_NULL_MESSAGE;
import static utility.ResponseEntityErrorCodes.TRANSACTION_DATE_IS_NULL;
import static utility.ResponseEntityErrorCodes.TRANSACTION_IS_COMPLETED_IS_NULL;

// Lombok autogenerated code


// Define the class as an entity in order to map it
@Data
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "order_transaction")
public class OrderTransaction {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "order_transaction_generator")
    @SequenceGenerator(name="order_transaction_generator",sequenceName = "order_transaction_seq", allocationSize = 1)
    @Column(name = "id_transaction")
    private long idTransaction;

    @NotNull(message = TRANSACTION_IS_COMPLETED_IS_NULL)
    @Column(name = "is_completed")
    @ColumnDefault("'false'")
    private boolean isCompleted;
    @NotNull(message = TRANSACTION_DATE_IS_NULL)
    @Column(name = "transaction_date")
    private Date transactionDate;

    @ManyToOne
    private ClientTable clientTable;
    @JsonIgnore
    @OneToMany(fetch = FetchType.EAGER, mappedBy = "orderTransaction", cascade = CascadeType.REMOVE)
    private List<ClientOrder> clientOrders;
}
